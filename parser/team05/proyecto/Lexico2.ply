# GRUPO 5
# 201213062 - Mónica Raquel Calderon Muñoz
# 201213223 - Astrid Edith Hernandez Gonzalez
# 201213255 - Leonel Eduardo Avila Calvillo
# 201220159 - Diego Ahtohil Noj Armira
# 201220165 - Oscar Rolando Bernard Peralta


#||||||||||||||||||||||||||||||||||||||||||
#           GRAMATICA DESCENDENTE 
#||||||||||||||||||||||||||||||||||||||||||


init            :   INSTRUCCIONES


INSTRUCCIONES   :   INSTRUCCION INSTRUCCIONES_P

INSTRUCCIONES_P :   INSTRUCCION INSTRUCCIONES_P
                |   epsilon


INSTRUCCION     :   I_SELECT COMPLEMENTOSELECT
                |   I_REPLACE
                |   I_CTABLE
                |   I_CTYPE
                |   I_DROP
                |   I_INSERT
                |   I_ALTERDB
                |   I_UPDATE
                |   I_SHOW
                |   I_DELETE
                |   I_USE
                |   I_ALTERTB


I_USE           :   USE ID PCOMA

    
# CREATE TYPE

I_CTYPE       : CREATE TYPE ID AS ENUM PABRE I_LVALUES PCIERRA PCOMA

I_LVALUES          :   I_LVALUES COMA CONDI

I_LVALUES          :   CONDI

CONDI          :   CONDICION

# TERMINO CREATE TYPE


# CREATE TABLE

I_CTABLE        :   CREATE TABLE ID PABRE I_LTATRIBUTOS PCIERRA INHERITS PABRE ID PCIERRA PCOMA
I_CTABLE        :   CREATE TABLE ID PABRE I_LTATRIBUTOS PCIERRA PCOMA

I_LTATRIBUTOS    : I_LTATRIBUTOS COMA I_TATRIBUTOS

I_LTATRIBUTOS    : I_TATRIBUTOS

I_TATRIBUTOS     : ID I_TIPO LI_LLAVES

I_TATRIBUTOS     : ID I_TIPO

I_TATRIBUTOS     : PCONSTRAINT

PCONSTRAINT     : CONSTRAINT ID TIPO_CONSTRAINT

PCONSTRAINT     :  TIPO_CONSTRAINT

TIPO_CONSTRAINT     :  UNIQUE PABRE I_LIDS PCIERRA

TIPO_CONSTRAINT     :  PRIMARY KEY PABRE I_LIDS PCIERRA

TIPO_CONSTRAINT        : CHECK CONDICION

TIPO_CONSTRAINT        : FOREIGN KEY PABRE I_LIDS PCIERRA REFERENCES ID PABRE I_LIDS PCIERRA

I_LIDS           : I_LIDS COMA CONDICION

I_LIDS           : CONDICION

LI_LLAVES         : LI_LLAVES I_LLAVES

LI_LLAVES         : I_LLAVES

I_LLAVES         : PRIMARY KEY

I_LLAVES         : REFERENCES ID PABRE I_CREFERENCE PCIERRA

I_LLAVES         : DEFAULT CONDICION

I_LLAVES         : NULL

I_LLAVES         : NOT NULL

I_LLAVES         : CONSTRAINT ID UNIQUE

I_LLAVES         : UNIQUE


I_LLAVES         : CHECK CONDICION    

I_LLAVES         : FOREIGN KEY PABRE I_LIDS PCIERRA REFERENCES ID PABRE I_LIDS PCIERRA

I_LLAVES         : CONSTRAINT ID CHECK CONDICION

I_CREFERENCE     : I_CREFERENCE COMA ID

I_CREFERENCE     : ID

# TERMINA CREATE TABLE

# TIPOS DE DATOS

I_TIPO           : SMALLINT

I_TIPO           : INTEGER


I_TIPO           : BIGINT

I_TIPO           : DECIMAL PABRE NUMERO COMA NUMERO PCIERRA


I_TIPO           : DECIMAL

I_TIPO           : NUMERIC

I_TIPO           : NUMERIC PABRE NUMERO COMA NUMERO PCIERRA

I_TIPO           : NUMERIC PABRE NUMERO PCIERRA

I_TIPO           : REAL

I_TIPO           : DOUBLE PABRE NUMERO PCIERRA

I_TIPO           : MONEY

I_TIPO           : CHARACTER VARYING PABRE NUMERO PCIERRA

I_TIPO           : CHARACTER PABRE NUMERO PCIERRA

I_TIPO           : VARCHAR PABRE NUMERO PCIERRA

I_TIPO           : CHAR PABRE NUMERO PCIERRA

I_TIPO           : TEXT

I_TIPO           : TIMESTAMP

I_TIPO           : TIMESTAMP PABRE NUMERO PCIERRA

I_TIPO           : TIME

I_TIPO           : TIME PABRE NUMERO PCIERRA

I_TIPO           : DATE

I_TIPO           : INTERVAL I_FIELDS

I_TIPO           : INTERVAL I_FIELDS PABRE NUMERO PCIERRA

I_TIPO           : BOOLEAN



# TERMINA TIPO DE DATOS

I_FIELDS         : MONTH

I_FIELDS         : HOUR

I_FIELDS         : MINUTE

I_FIELDS         : SECOND

I_FIELDS         : YEAR


# CREATE DATABASE


I_REPLACE     : CREATE OR REPLACE DATABASE IF NOT EXISTS ID COMPLEMENTO_CREATE_DATABASE PCOMA

I_REPLACE     : CREATE OR REPLACE DATABASE ID COMPLEMENTO_CREATE_DATABASE PCOMA

I_REPLACE     : CREATE DATABASE IF NOT EXISTS ID COMPLEMENTO_CREATE_DATABASE PCOMA

I_REPLACE     : CREATE DATABASE ID COMPLEMENTO_CREATE_DATABASE PCOMA

COMPLEMENTO_CREATE_DATABASE        : OWNER IGUAL CADENA MODE IGUAL NUMERO

COMPLEMENTO_CREATE_DATABASE        : MODE IGUAL NUMERO OWNER IGUAL CADENA

COMPLEMENTO_CREATE_DATABASE       : OWNER IGUAL CADENA

COMPLEMENTO_CREATE_DATABASE       : MODE IGUAL NUMERO


# TERMINA CREATE DATABASE


# ALTER DATABASE

I_ALTERDB    : ALTER DATABASE ID P_OPERACION_ALTERDB PCOMA

P_OPERACION_ALTERDB    : OWNER TO P_TIPOS_OWNER

P_OPERACION_ALTERDB    : MODE TO NUMERO

P_OPERACION_ALTERDB    : RENAME TO CADENA

P_TIPOS_OWNER    : CADENA

P_TIPOS_OWNER    : CURRENT_USER

P_TIPOS_OWNER    : SESSION_USER

P_TIPOS_OWNER    : ID

# TERMINA ALTER DATABASE

# ALTER TABLE 

I_ALTERTB    : ALTER TABLE ID L_ADD_COLUMNS PCOMA

I_ALTERTB    : ALTER TABLE ID L_DROP_COLUMNS PCOMA

I_ALTERTB    : ALTER TABLE ID ADD TIPOS_ALTER PCOMA

I_ALTERTB    : ALTER TABLE ID ALTER COLUMN ID SET NOT NULL PCOMA

I_ALTERTB    : ALTER TABLE ID DROP CONSTRAINT ID PCOMA

I_ALTERTB    : ALTER TABLE ID L_COLUMN PCOMA

L_COLUMN    : L_COLUMN COMA P_COLUMN

L_COLUMN    : P_COLUMN

P_COLUMN    : ALTER COLUMN ID TYPE VARCHAR PABRE NUMERO PCIERRA

TIPOS_ALTER    : CHECK CONDICION

TIPOS_ALTER    : UNIQUE PABRE L_ID PCIERRA

TIPOS_ALTER    : FOREIGN KEY PABRE L_ID PCIERRA REFERENCES ID PABRE L_ID PCIERRA

TIPOS_ALTER    : CONSTRAINT ID CHECK CONDICION

TIPOS_ALTER    : CONSTRAINT ID UNIQUE PABRE L_ID PCIERRA

TIPOS_ALTER    : CONSTRAINT ID FOREIGN KEY PABRE L_ID PCIERRA REFERENCES ID PABRE L_ID PCIERRA

L_ID    : L_ID COMA ID

L_ID    : ID

L_DROP_COLUMNS    : L_DROP_COLUMNS COMA DROP_COLUMN

L_DROP_COLUMNS    : DROP_COLUMN

DROP_COLUMN    : DROP COLUMN ID

L_ADD_COLUMNS    : L_ADD_COLUMNS COMA ADD_COLUMN

L_ADD_COLUMNS    : ADD_COLUMN

ADD_COLUMN    : ADD COLUMN ID I_TIPO

# TERMINA ALTER TABLE

# DROP TABLE

I_DROP      : DROP TABLE ID PCOMA


# TERMINA DROP TABLE

# DROP DATABASE

I_DROP    : DROP DATABASE IF EXISTS ID PCOMA

I_DROP     : DROP DATABASE ID PCOMA


# TERMINA DROP DATABASE

# INSERT

I_INSERT      : INSERT INTO ID VALUES PABRE I_LVALT PCIERRA PCOMA

I_INSERT      : INSERT INTO ID PABRE I_LVALT PCIERRA VALUES PABRE I_LVALT PCIERRA PCOMA

I_LVALT       : I_LVALT COMA I_VALTAB

I_LVALT       : I_VALTAB

I_VALTAB      : CONDICION

I_VALTAB      : MD5 PABRE CADENA PCIERRA


# TERMINA INSERT


# UPDATE  


I_UPDATE      : UPDATE ID SET I_LUPDATE PWHERE PCOMA

I_LUPDATE     : I_LUPDATE COMA I_VALUPDATE

I_LUPDATE     : I_VALUPDATE

I_VALUPDATE   : CONDICION

I_VALUPDATE   : CONDICION IGUAL FTRIGONOMETRICASUP PABRE LNUM PCIERRA

I_VALUPDATE      : MD5 PABRE CADENA PCIERRA

FTRIGONOMETRICASUP   : ACOSD

FTRIGONOMETRICASUP   : ASIN


# TERMINA UPDATE




# SHOW

I_SHOW       : SHOW DATABASES PCOMA


# TERMINA SHOW

# DELETE

I_DELETE     : DELETE FROM ID PWHERE PCOMA


# TERMINA DELETE

#--------------------------------------------------------------------------------

I_SELECT  :   SELECT VALORES PFROM LCOMPLEMENTOS

I_SELECT  :   SELECT DISTINCT VALORES PFROM LCOMPLEMENTOS

I_SELECT  :   SELECT VALORES PFROM PWHERE LCOMPLEMENTOS

I_SELECT  :   SELECT DISTINCT VALORES PFROM PWHERE LCOMPLEMENTOS

I_SELECT  :   SELECT VALORES PFROM PWHERE

I_SELECT  :   SELECT DISTINCT VALORES PFROM PWHERE

I_SELECT  :   SELECT DISTINCT VALORES PFROM

I_SELECT  :   SELECT VALORES PFROM
   
I_SELECT   :   SELECT VALORES

I_SELECT   :   SELECT DISTINCT VALORES

LCOMPLEMENTOS  :   LCOMPLEMENTOS COMPLEMENTO

LCOMPLEMENTOS  :   COMPLEMENTO

COMPLEMENTO  :   PGROUPBY

COMPLEMENTO  :   PHAVING

COMPLEMENTO  :   PORDERBY

COMPLEMENTO  :   PLIMIT

COMPLEMENTOSELECT  : UNION I_SELECT PCOMA

COMPLEMENTOSELECT  : UNION ALL I_SELECT PCOMA

COMPLEMENTOSELECT  : INTERSECT I_SELECT PCOMA

COMPLEMENTOSELECT  : INTERSECT ALL I_SELECT PCOMA

COMPLEMENTOSELECT  : EXCEPT I_SELECT PCOMA

COMPLEMENTOSELECT  : EXCEPT ALL I_SELECT PCOMA

COMPLEMENTOSELECT  : PCOMA

PLIMIT  :   LIMIT CONDICION

PLIMIT  :   LIMIT CONDICION OFFSET CONDICION

PORDERBY  :   ORDER BY LCOMPLEMENTOORDERBY

LCOMPLEMENTOORDERBY  :   LCOMPLEMENTOORDERBY COMA COMPLEMENTOORDERBY

LCOMPLEMENTOORDERBY  :   COMPLEMENTOORDERBY

COMPLEMENTOORDERBY  :   CONDICION COMPLEMENTOORDERBY1

COMPLEMENTOORDERBY1  :   COMPLEMENTOORDER

COMPLEMENTOORDER  :   ASC

COMPLEMENTOORDER  :   DESC

COMPLEMENTOORDER  :   ASC NULLS FIRST

COMPLEMENTOORDER  :   ASC NULLS LAST

COMPLEMENTOORDER  :   DESC NULLS FIRST

COMPLEMENTOORDER  :   DESC NULLS LAST

COMPLEMENTOORDER  :   EMPTY

PHAVING  :   HAVING CONDICION

PGROUPBY  :   GROUP BY LCOMPLEMENTOGROUP

LCOMPLEMENTOGROUP  :   LCOMPLEMENTOGROUP COMA COMPLEMENTOGROUP

LCOMPLEMENTOGROUP  :   COMPLEMENTOGROUP

COMPLEMENTOGROUP  :   CONDICION

VALORES  :   POR

VALORES  :   LISTAVALORES

LISTAVALORES  :   LISTAVALORES COMA VALOR

LISTAVALORES  :   VALOR

VALOR  :   PABRE SUBCONSULTA PCIERRA ALIAS

VALOR  :   COUNT PABRE POR PCIERRA ALIAS

VALOR  :   COUNT PABRE ID PCIERRA ALIAS

VALOR  :   COUNT PABRE POR PCIERRA

VALOR  :   COUNT PABRE ID PCIERRA

VALOR  :   COUNT PABRE ID PUNTO ID PCIERRA ALIAS

VALOR  :   COUNT PABRE ID PUNTO ID PCIERRA

VALOR  :   CONDICION ALIAS

VALOR  :   CONDICION

VALOR  :   FTRIGONOMETRICAS PABRE LNUM PCIERRA

VALOR  :   FTRIGONOMETRICAS PABRE LNUM PCIERRA ALIAS

VALOR  :   GREATEST PABRE LNUM PCIERRA

VALOR  :   LEAST PABRE LNUM PCIERRA

VALOR  :   GREATEST PABRE LNUM PCIERRA ALIAS

VALOR  :   LEAST PABRE LNUM PCIERRA ALIAS

VALOR  :   RANDOM PABRE PCIERRA ALIAS

VALOR  :   RANDOM PABRE PCIERRA

VALOR  :   PI PABRE PCIERRA   ALIAS

VALOR  :   PI PABRE PCIERRA

VALOR  :   DECODE PABRE CADENA COMA CADENA PCIERRA ALIAS

VALOR  :   DECODE PABRE CADENA COMA CADENA PCIERRA

VALOR  :   ENCODE PABRE CADENA COMA CADENA PCIERRA ALIAS

VALOR  :   ENCODE PABRE CADENA COMA CADENA PCIERRA

VALOR  :   CONVERT PABRE CADENA AS DATE PCIERRA

VALOR  :   CONVERT PABRE CADENA AS INTEGER PCIERRA

VALOR  :   CONVERT PABRE CADENA AS DATE PCIERRA ALIAS

VALOR  :   CONVERT PABRE CADENA AS INTEGER PCIERRA ALIAS

VALOR  :   SHA256 PABRE CADENA PCIERRA

VALOR  :   SHA256 PABRE CADENA PCIERRA ALIAS

VALOR  :   NUM OPERADOR NUM ALIAS

VALOR  :   NUM OPERADOR NUM

VALOR  :   BNot NUM ALIAS

VALOR  :   BNot NUM

VALOR  :   raizCuadrada NUM ALIAS

VALOR  :   raizCuadrada NUM

VALOR  :   raizCubica NUM ALIAS

VALOR  :   raizCubica NUM

VALOR  :   GETBYTE PABRE CADENA COMA NUMERO PCIERRA

VALOR  :   GETBYTE PABRE CADENA COMA NUMERO PCIERRA ALIAS

VALOR  :   SETBYTE PABRE CADENA COMA NUMERO COMA NUMERO PCIERRA

VALOR  :   SETBYTE PABRE CADENA COMA NUMERO COMA NUMERO PCIERRA ALIAS

VALOR  :   CASE LWHEN END

VALOR  :   CASE LWHEN END ALIAS

VALOR  :   ID_VALOR PABRE LCONDICION_FUNCION PCIERRA ALIAS

VALOR  :   ID_VALOR PABRE LCONDICION_FUNCION PCIERRA

LWHEN  :   LWHEN PWHEN

LWHEN  :   PWHEN

PWHEN  :   WHEN CONDICION THEN CONDICION

PWHEN  :   ELSE CONDICION

ID_VALOR  :   DEGREES

ID_VALOR  :   DIV

ID_VALOR  :   FEXP

ID_VALOR  :   FACTORIAL

ID_VALOR  :   FLOOR

ID_VALOR  :   GCD

ID_VALOR  :   LN

ID_VALOR  :   LOG

ID_VALOR  :   MOD

ID_VALOR  :   POWER

ID_VALOR  :   RADIANS

ID_VALOR  :   ROUND

ID_VALOR  :   SIGN

ID_VALOR  :   SQRT

ID_VALOR  :   WIDTH_BUCKET

ID_VALOR  :   TRUNC

OPERADOR  :   BAnd

OPERADOR  :   BOr

OPERADOR  :   BXor

OPERADOR  :   DesplazaI

OPERADOR  :   DesplazaD

LNUM  : LNUM COMA NUM

LNUM   : NUM

NUM    : NUMERO

NUM  :   DECIMALN

NUM  :   CADENA

FTRIGONOMETRICAS  :   ACOS

FTRIGONOMETRICAS  :   ACOSD

FTRIGONOMETRICAS  :   ASIN

FTRIGONOMETRICAS  :   ASIND

FTRIGONOMETRICAS  :   ATAN

FTRIGONOMETRICAS  :   ATAND

FTRIGONOMETRICAS  :   ATAN2

FTRIGONOMETRICAS  :   ATAN2D

FTRIGONOMETRICAS  :   COS

FTRIGONOMETRICAS  :   COSD

FTRIGONOMETRICAS  :   COT

FTRIGONOMETRICAS  :   COTD

FTRIGONOMETRICAS  :   SIN

FTRIGONOMETRICAS  :   SIND

FTRIGONOMETRICAS  :   TAN

FTRIGONOMETRICAS  :   TAND

FTRIGONOMETRICAS  :   SINH

FTRIGONOMETRICAS  :   COSH

FTRIGONOMETRICAS  :   TANH

FTRIGONOMETRICAS  :   ASINH

FTRIGONOMETRICAS  :   ACOSH

FTRIGONOMETRICAS  :   ATANH

FUNCION    :   AVG

FUNCION    :   SUM

FUNCION    :   MIN

FUNCION    :   MAX

ALIAS  :   AS ID

ALIAS  :   ID

ALIAS  :   AS IDALIAS

ALIAS  :   IDALIAS

PFROM  :   FROM LVALORESFROM

LVALORESFROM   :   LVALORESFROM  COMA VALORFROM

LVALORESFROM   :   VALORFROM

VALORFROM  :   ID ALIAS

VALORFROM  :   ID

VALORFROM  :   PABRE SUBCONSULTA PCIERRA ALIAS

SUBCONSULTA    :   SELECT VALORES PFROM LCOMPLEMENTOS

SUBCONSULTA    :   SELECT VALORES PFROM PWHERE LCOMPLEMENTOS

SUBCONSULTA    :   SELECT VALORES PFROM

SUBCONSULTA    :   SELECT VALORES PFROM PWHERE

PWHERE  :   WHERE CONDICION

CONDICION  :   CONDICION IGUAL CONDICION

CONDICION  :   CONDICION DIF CONDICION

CONDICION  :   CONDICION DIF1 CONDICION

CONDICION  :   CONDICION MENOR CONDICION

CONDICION  :   CONDICION MENORIGUAL CONDICION

CONDICION  :   CONDICION MAYOR CONDICION

CONDICION  :   CONDICION MAYORIGUAL CONDICION

CONDICION  :   CONDICION AND CONDICION

CONDICION  :   CONDICION OR CONDICION

CONDICION  :   NOT CONDICION

CONDICION  :   PABRE CONDICION PCIERRA

CONDICION  :   CONDICION MAS CONDICION

CONDICION  :   CONDICION MENOS CONDICION

CONDICION  :   CONDICION POR CONDICION

CONDICION  :   CONDICION DIVIDIDO CONDICION

CONDICION  :   CONDICION MODULO CONDICION

CONDICION  :   CONDICION EXP CONDICION

CONDICION  :   CONDICION IS CONDICION

CONDICION  :   CONDICION IS NULL CONDICION

CONDICION  :   CONDICION NOT NULL CONDICION

CONDICION  :   MENOS CONDICION %prec UMENOS

CONDICION  :   MAS CONDICION %prec UMAS

CONDICION  :   EXTRACT PABRE DATETIME FROM PTIMESTAMP PCIERRA

CONDICION  :   FUNCIONES_WHERE

CONDICION  :   NUMERO

CONDICION  :   DECIMALN

CONDICION  :   CADENA

CONDICION  :   TRUE

CONDICION  :   FALSE

CONDICION  :   ID

CONDICION  :   ID PUNTO ID

CONDICION  :   ID PUNTO POR

CONDICION  :   FUNCIONES_SISTEMA

CONDICION  :   DATE_PART PABRE CADENA COMA INTERVAL CADENA PCIERRA

CONDICION  :   CURRENT_DATE

CONDICION  :   CURRENT_TIME

CONDICION  :   TIMESTAMP CADENA

CONDICION  :   CONDICION BETWEEN CONDICION

CONDICION  :   CONDICION NOT BETWEEN CONDICION %prec NOTB

CONDICION  :   CONDICION BETWEEN SIMMETRIC CONDICION

CONDICION  :   CONDICION NOT BETWEEN SIMMETRIC CONDICION  %prec NOTB

CONDICION  :   CONDICION IS DISTINCT FROM CONDICION

CONDICION  :   CONDICION IS NOT DISTINCT FROM CONDICION

CONDICION  :   NULL

CONDICION  :   UNKNOWN

CONDICION  :   PABRE SUBCONSULTA PCIERRA

CONDICION  :   FUNCION PABRE ID PCIERRA

CONDICION  :   FUNCION PABRE ID PUNTO ID PCIERRA

CONDICION  :   NOW PABRE PCIERRA

FUNCIONES_SISTEMA  :   ID_FUNCION PABRE LCONDICION_FUNCION PCIERRA ALIAS

FUNCIONES_SISTEMA  :   ID_FUNCION PABRE LCONDICION_FUNCION PCIERRA

FUNCIONES_SISTEMA  :   ID_FUNCION_S PABRE LCONDICION_FUNCION_S PCIERRA ALIAS

FUNCIONES_SISTEMA  :   ID_FUNCION_S PABRE LCONDICION_FUNCION_S PCIERRA

FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH CADENA FROM CADENA PCIERRA ALIAS

FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH CADENA FROM CADENA PCIERRA

FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH FROM CADENA COMA CADENA PCIERRA ALIAS

FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH FROM CADENA COMA CADENA PCIERRA

ID_FUNCION_S  :   SUBSTRING

ID_FUNCION_S  :   LENGTH

ID_FUNCION_S  :   SUBSTR

LBOTH  :   LEADING

LBOTH  :   TRAILING

LBOTH  :   BOTH

LCONDICION_FUNCION_S  :   CONDICION

LCONDICION_FUNCION_S  :   CONDICION COMA NUMERO COMA NUMERO

ID_FUNCION  :   ABS

ID_FUNCION  :   CBRT

ID_FUNCION  :   CEIL

ID_FUNCION  :   CEILING

LCONDICION_FUNCION  :   CONDICION

LCONDICION_FUNCION  :   LCONDICION_FUNCION COMA CONDICION

DATETIME  :   YEAR

DATETIME  :   HOUR

DATETIME  :   MINUTE

DATETIME  :   SECOND

DATETIME  :   MONTH

DATETIME  :   DAY

FUNCIONES_WHERE  :   EXISTS PABRE SUBCONSULTA PCIERRA

def p_FuncionesWhereExist(t):
    '   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= \"EXISTS\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(Exists(t[3].getInstruccion()), NodoAST('FUNCION'))
    ret.getNodo().setHijo(NodoAST('EXISTS'))
    ret.getNodo().setHijo(t[3].getNodo())
    t[0] = ret

def p_FuncionesWhereIn(t):
    'FUNCIONES_WHERE  :   CONDICION IN PABRE SUBCONSULTA PCIERRA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> \"IN\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(In(t[1].getInstruccion(), t[4].getInstruccion(), True), NodoAST('IN'))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(t[4].getNodo())
    t[0] = ret

def p_FuncionesWhereNotIn(t):
    'FUNCIONES_WHERE  :   CONDICION NOT IN PABRE SUBCONSULTA PCIERRA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> \"NOT\" \"IN\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(In(t[1].getInstruccion(), t[5].getInstruccion(), False), NodoAST('NOT IN'))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(t[5].getNodo())
    t[0] = ret

def p_FuncionesWhereAny(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW ANY PABRE SUBCONSULTA PCIERRA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> <OPERATOR_FW> \"ANY\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(Any_op(t[1].getInstruccion(), t[2], 'ANY', t[5].getInstruccion()), NodoAST(t[2]))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(NodoAST('ANY'))
    ret.getNodo().setHijo(t[5].getNodo())
    t[0] = ret

def p_FuncionesWhereAll(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW ALL PABRE SUBCONSULTA PCIERRA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> <OPERATOR_FW> \"ALL\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(Any_op(t[1].getInstruccion(), t[2], 'ALL', t[5].getInstruccion()), NodoAST(t[2]))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(NodoAST('ALL'))
    ret.getNodo().setHijo(t[5].getNodo())
    t[0] = ret

def p_FuncionesWhereSome(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW SOME PABRE SUBCONSULTA PCIERRA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> <OPERATOR_FW> \"SOME\" \"(\" <SUBCONSULTA> \")\"")
    ret = Retorno(Any_op(t[1].getInstruccion(), t[2], 'SOME', t[5].getInstruccion()), NodoAST(t[2]))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(NodoAST('SOME'))
    ret.getNodo().setHijo(t[5].getNodo())
    t[0] = ret

def p_FuncionesWhereLike(t):
    'FUNCIONES_WHERE  :   CONDICION LIKE CADENA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> \"LIKE\" \"CADENA\"")
    ret = Retorno(Like(t[1].getInstruccion(), t[3], True), NodoAST('LIKE'))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(NodoAST(t[3]))
    t[0] = ret

def p_FuncionesWhereNotLike(t):
    'FUNCIONES_WHERE  :   CONDICION NOT LIKE CADENA   '
    global reporte_gramatical
    reporte_gramatical.append("<FUNCIONES_WHERE> ::= <CONDICION> \"NOT\" \"LIKE\" \"CADENA\"")
    ret = Retorno(Like(t[1].getInstruccion(), t[3], False), NodoAST('NOT LIKE'))
    ret.getNodo().setHijo(t[1].getNodo())
    ret.getNodo().setHijo(NodoAST(t[4]))
    t[0] = ret

def p_OperatorFwMenor(t):
    'OPERATOR_FW  :   MENOR   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwMayor(t):
    'OPERATOR_FW  :   MAYOR   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwMenorIgual(t):
    'OPERATOR_FW  :   MENORIGUAL   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwMayorIgual(t):
    'OPERATOR_FW  :   MAYORIGUAL   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwIgual(t):
    'OPERATOR_FW  :   IGUAL   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwDif(t):
    'OPERATOR_FW  :   DIF   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_OperatorFwDif1(t):
    'OPERATOR_FW  :   DIF1   '
    global reporte_gramatical
    reporte_gramatical.append("<OPERATOR_FW> ::= \"" + str(t[1]) + "\"")
    t[0] = t[1]

def p_PTimestamC(t):
    'PTIMESTAMP  :   TIMESTAMP CADENA '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"TIMESTAMP\" \"CADENA\"")
    ret = Retorno(Cadena(t[2]), NodoAST(t[2]))
    t[0] = ret

def p_PTimestamId(t):
    'PTIMESTAMP  :   TIMESTAMP ID '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"TIMESTAMP\" \"ID\"")
    ret = Retorno(Id(t[2], None), NodoAST(t[2]))
    t[0] = ret

def p_PTimestamIdPId(t):
    'PTIMESTAMP  :   TIMESTAMP ID PUNTO ID '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"TIMESTAMP\" \"ID\" \".\" \"ID\"")
    ret = Retorno(Id(t[4], t[2]), NodoAST('.'))
    ret.getNodo().setHijo(NodoAST(t[2]))
    ret.getNodo().setHijo(NodoAST(t[4]))

def p_PTimestamCadena(t):
    'PTIMESTAMP  :   CADENA '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"CADENA\"")
    ret = Retorno(Cadena(t[1]), NodoAST(t[1]))
    t[0] = ret

def p_PTimestamId1(t):
    'PTIMESTAMP  :   ID '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"ID\"")
    ret = Retorno(Id(t[1], None), NodoAST(t[1]))
    t[0] = ret

def p_PTimestamIdP(t):
    'PTIMESTAMP  :   ID PUNTO ID '
    global reporte_gramatical
    reporte_gramatical.append("<PTIMESTAMP> ::= \"ID\" \".\" \"ID\"")
    ret = Retorno(Id(t[3], t[1]), NodoAST('.'))
    ret.getNodo().setHijo(NodoAST(t[1]))
    ret.getNodo().setHijo(NodoAST(t[3]))

def p_empty(t):
    'EMPTY :'

def p_error(t):
    global counter_syntactic_error
    err = open("reports/error_syntactic.txt", "a+")
    txt = '<tr><td>' + str(counter_syntactic_error) + '</td>'
    txt += '<td>' + str(t.value) + '</td>'
    txt += '<td>' + 'Texto ingresado no reconocido.' + '</td>'
    txt += '<td>' + str(t.lexer.lineno) + '</td>'
    txt += '<td>' + str(get_column(t.lexer.lexdata, t)) + '</td><tr>\n'
    err.write(txt)
    err.close()
    counter_syntactic_error += 1
    if not t:
        return
    while True:
        entry = parser.token()
        if not entry or entry.type == 'RBRACE':
            break
    parser.restart()


# START PARSING THE INPUT TEXT
parser = yacc.yacc()


def parse(p_input):
    global counter_lexical_error, counter_syntactic_error
    counter_lexical_error = 1
    counter_syntactic_error = 1
    return parser.parse(p_input)




def p_inherits(t):
    'I_INHERITS    : INHERITS PABRE ID PCIERRA PCOMA'

def p_inherits1(t):
    'I_INHERITS    : PCOMA'

def p_tAtributos(t):
    'I_LTATRIBUTOS    : I_LTATRIBUTOS COMA I_TATRIBUTOS'

def p_tAtributos1(t):
    'I_LTATRIBUTOS    : I_TATRIBUTOS'

def p_atributosT(t):
    'I_TATRIBUTOS     : ID I_TIPO LI_LLAVES'

def p_atributosTipo(t):
    'I_TATRIBUTOS     : ID I_TIPO'

def p_atributosT1(t):
    'I_TATRIBUTOS     : PCONSTRAINT'

def p_PConstraint(t):
    'PCONSTRAINT     : CONSTRAINT ID TIPO_CONSTRAINT'

def p_PConstrainTipo(t):
    'PCONSTRAINT     :  TIPO_CONSTRAINT'

def p_TipoConstraintUnique(t):
    'TIPO_CONSTRAINT     :  UNIQUE PABRE I_LIDS PCIERRA' 

def p_TipoConstraintPrimaryKey(t):
    'TIPO_CONSTRAINT     :  PRIMARY KEY PABRE I_LIDS PCIERRA' 

def p_ipoConstraintCheck(t):
    'TIPO_CONSTRAINT        : CHECK CONDICION'

def p_ipoConstraintForeignKey(t):
    'TIPO_CONSTRAINT        : FOREIGN KEY PABRE I_LIDS PCIERRA REFERENCES ID PABRE I_LIDS PCIERRA'
    
def p_Lllave(t):
    'LI_LLAVES         : LI_LLAVES I_LLAVES'

def p_Lllave1(t):
    'LI_LLAVES         : I_LLAVES'

def p_cRef(t):
    'I_CREFERENCE     : I_CREFERENCE COMA ID'

def p_cRef2(t):
    'I_CREFERENCE     : ID'

def p_llave(t):
    'I_LLAVES         : PRIMARY KEY'

def p_llave2(t):
    'I_LLAVES         : REFERENCES ID PABRE I_CREFERENCE PCIERRA' 

def p_llave3(t):
    'I_LLAVES         : DEFAULT ID'

def p_llave4(t):
    'I_LLAVES         : NULL'

def p_llave5(t):
    'I_LLAVES         : NOT NULL'

def p_llave6(t):
    'I_LLAVES         : CONSTRAINT ID'

def p_llave7(t):
    'I_LLAVES         : UNIQUE PABRE I_LIDS PCIERRA'

def p_llave9(t):
    'I_LLAVES         : UNIQUE'

def p_llave10(t):
    'I_LLAVES         : CHECK PABRE I_LIDS PCIERRA'

def p_llave11(t): 
    'I_LLAVES    : FOREIGN KEY PABRE I_LIDS PCIERRA REFERENCES ID PABRE I_LIDS PCIERRA '

def p_lIds(t):
    'I_LIDS           : I_LIDS COMA CONDICION'

def p_lIds1(t):
    'I_LIDS           : CONDICION'

def p_tipo(t):
    'I_TIPO           : SMALLINT'

def p_tipo2(t):
    'I_TIPO           : INTEGER'

def p_tipo3(t):
    'I_TIPO           : BIGINT'

def p_tipo4(t):
    'I_TIPO           : DECIMAL'

def p_tipo5(t):
    'I_TIPO           : NUMERIC'

def p_tipo6(t):
    'I_TIPO           : REAL'

def p_tipo7(t):
    'I_TIPO           : DOUBLE I_PREC'

def p_tipo8(t):
    'I_TIPO           : MONEY'

def p_tipo9(t):
    'I_TIPO           : CHARACTER I_TCHAR'

def p_tipo11(t):
    'I_TIPO           : VARCHAR PABRE NUMERO PCIERRA'

def p_tipo22(t):
    'I_TIPO           : CHAR PABRE NUMERO PCIERRA'

def p_tipo33(t):
    'I_TIPO           : TEXT'

def p_tipo44(t):
    'I_TIPO           : TIMESTAMP I_PREC'

def p_tipo55(t):
    'I_TIPO           : TIME I_PREC'

def p_tipo66(t):
    'I_TIPO           : DATE'

def p_tipo77(t):
    'I_TIPO           : INTERVAL I_FIELDS I_PREC'

def p_tipo88(t):
    'I_TIPO           : BOOLEAN'

def p_tipo99(t):
    'I_TIPO           : ID'

def p_tchar(t):
    'I_TCHAR          : VARYING PABRE NUMERO PCIERRA'

def p_tchar1(t):
    'I_TCHAR          : PABRE NUMERO PCIERRA'

def p_prec(t):
    'I_PREC           : PABRE NUMERO PCIERRA'

def p_prec1(t):
    'I_PREC           : '

def p_fields(t):
    'I_FIELDS         : MONTH'

def p_fields1(t):
    'I_FIELDS         : HOUR'

def p_fields2(t):
    'I_FIELDS         : MINUTE'

def p_fields3(t):
    'I_FIELDS         : SECOND'

def p_fields4(t):
    'I_FIELDS         : YEAR'






def p_alterTB(t):
    'I_ALTERTB   : TABLE ID I_OPALTER '

def p_opAlterTB(t):
    'I_OPALTER   : I_LADDC PCOMA'

def p_opAlterTB1(t):
    'I_OPALTER   : I_LDROPC PCOMA'

def p_opAlterTB2(t):
    'I_OPALTER   : ADD I_TALTER PCOMA'

def p_opAlterTB3(t):
    'I_OPALTER   : ALTER COLUMN ID SET NOT NULL PCOMA'

def p_opAlterTB4(t):
    'I_OPALTER   : DROP CONSTRAINT ID PCOMA'

def p_opAlterTB5(t):
    'I_OPALTER   : I_LCOL PCOMA'

def p_lCol(t):
    'I_LCOL      : I_LCOL COMA I_PCOL'

def p_lCol2(t):
    'I_LCOL      : I_PCOL'

def p_pCol3(t):
    'I_PCOL      : ALTER COLUMN ID TYPE VARCHAR PABRE NUMERO PCIERRA'





def p_alterTB(t):
    'I_ALTERTB   : TABLE ID I_OPALTER '

def p_opAlterTB(t):
    'I_OPALTER   : I_LADDC PCOMA'

def p_opAlterTB1(t):
    'I_OPALTER   : I_LDROPC PCOMA'

def p_opAlterTB2(t):
    'I_OPALTER   : ADD I_TALTER PCOMA'

def p_opAlterTB3(t):
    'I_OPALTER   : ALTER COLUMN ID SET NOT NULL PCOMA'

def p_opAlterTB4(t):
    'I_OPALTER   : DROP CONSTRAINT ID PCOMA'

def p_opAlterTB5(t):
    'I_OPALTER   : I_LCOL PCOMA'

def p_lCol(t):
    'I_LCOL      : I_LCOL COMA I_PCOL'

def p_lCol2(t):
    'I_LCOL      : I_PCOL'

def p_pCol3(t):
    'I_PCOL      : ALTER COLUMN ID TYPE VARCHAR PABRE NUMERO PCIERRA'


def p_tipoConstraintC(t):
    'I_TCONST    : CHECK CONDICION '
    #INSTRUCCION TIPOCONSTRAINTC

def p_tipoConstraintU(t):
    'I_TCONST    : UNIQUE PABRE I_LIDS PCIERRA'
    #INSTRUCCION TIPOCONSTRAINTU

def p_tipoConstraintFK(t):
    'I_TCONST    : FOREIGN KEY PABRE I_LIDS PCIERRA REFERENCES ID PABRE I_LIDS PCIERRA  '
    #INSTRUCCION TIPOCONSTRAINTFK

def p_lCDrop(t):
    'I_LDROPC    : I_LDROPC COMA I_DROPC'

def p_lCDrop1(t):
    'I_LDROPC    : I_DROPC'

def p_cDrop(t):
    'I_DROPC     : DROP COLUMN ID'

def p_lCAdd(t):
    'I_LADDC     : I_LADDC COMA I_ADDC'

def p_lCAdd2(t):
    'I_LADDC     : I_ADDC'

def p_cAdd(t):
    'I_ADDC      : ADD COLUMN ID I_TIPO'


def p_tdrop1(t):
    """
        I_TDROP         :   I_DROPDB
    """
    t[0] = t[1]


def p_tdrop2(t):
    """
        I_TDROP         :   I_DROPTB
    """
    t[0] = t[1]


def p_drop_db(t):
    """
        I_DROPDB        :   DATABASE I_IFEXIST
    """
    # INSTRUCCION DROPDB
    t[0] = DropDB(t[2])


def p_if_exist1(t):
    """
        I_IFEXIST       :   IF EXISTS ID PCOMA
    """
    # INSTRUCCION IFEXIST1
    t[0] = IfExist1(t[3])


def p_if_exist2(t):
    """
        I_IFEXIST       :   ID PCOMA
    """
    # INSTRUCCION IFEXIST2
    t[0] = IfExist2(t[1])


def p_exist1(t):
    """
        I_EXIST         :   IF NOT EXISTS ID I_OWMOD
    """
    t[0] = DatabaseInfo(True, t[4], t[5])


def p_exist2(t):
    """
        I_EXIST         :   ID I_OWMOD
    """
    t[0] = DatabaseInfo(False, t[1], t[2])


def p_owmod1(t):
    """
        I_OWMOD         :   OWNER IGUAL ID I_MODE
                        |   OWNER IGUAL CADENA I_MODE
    """
    t[0] = Owner_Mode(t[3], t[4])


def p_owmod2(t):
    """
        I_OWMOD         :   MODE IGUAL NUMERO I_OWNER
    """
    t[0] = Owner_Mode(t[4], t[3])


def p_owmod3(t):
    """
        I_OWMOD         :   PCOMA
    """
    t[0] = Owner_Mode(None, None)


def p_mode1(t):
    """
        I_MODE          :   MODE IGUAL NUMERO I_OWNER
    """
    t[0] = t[3]


def p_mode2(t):
    """
        I_MODE          :   PCOMA
    """
    t[0] = None


def p_owner1(t):
    """
        I_OWNER         :   OWNER IGUAL ID PCOMA
                        |   OWNER IGUAL CADENA PCOMA
    """
    t[0] = t[3]


def p_owner2(t):
    """
        I_OWNER         :   PCOMA
    """
    t[0] = None


def p_AlterDB(t):
    'I_ALTERDB     : DATABASE ID I_OPALTERDB I_VALALTDB PCOMA'

def p_opAlterDB(t):
    'I_OPALTERDB   : RENAME TO'

def p_opAlterDB2(t):
    'I_OPALTERDB   : OWNER TO'

def p_valAlterDb(t):
    'I_VALALTDB    : ID'

def p_valAlterDb1(t):
    'I_VALALTDB    : CADENA'

def p_dropTB(t):
    'I_DROPTB      : TABLE ID PCOMA'
    # INSTRUCCION DROPTB
    #t[0]=DropTB(t[2])




def p_lValt(t):
    'I_LVALT       : I_LVALT COMA I_VALTAB'
    # INSTRUCCION REALIZADA

def p_lValt1(t):
    'I_LVALT       : I_VALTAB'
    # INSTRUCCION REALIZADA

def p_lValt1(t):
    'I_LVALT       : I_VALTAB'

def p_update(t):
    'I_UPDATE      : UPDATE ID SET I_LUPDATE PWHERE PCOMA'

def p_lUpdate(t):
    'I_LUPDATE     : I_LUPDATE COMA I_VALUPDATE'

def p_lUpdate1(t):
    'I_LUPDATE     : I_VALUPDATE'

def p_valUpdate(t):
    'I_VALUPDATE   : CONDICION'


def p_show(t):
    'I_SHOW       : SHOW DATABASES PCOMA'

def p_delete(t):
    'I_DELETE     : DELETE FROM ID PWHERE PCOMA'

def p_valTab(t):
    'I_VALTAB      : NUMERO'
    # INSTRUCCION VALTAB

def p_valTab1(t):
    'I_VALTAB      : CADENA'
    # INSTRUCCION VALTAB

def p_valTabId(t):
    'I_VALTAB      : ID'
    # INSTRUCCION VALTAB

def p_valTabDecimal(t):
    'I_VALTAB      : DECIMAL'
    # INSTRUCCION VALTAB

def p_valTabIdAlias(t):
    'I_VALTAB      : IDALIAS'
    # INSTRUCCION VALTAB
    
def p_valTabMd5(t):
    'I_VALTAB      : MD5 PABRE CADENA PCIERRA'
    # INSTRUCCION VALTAB

def p_valTabNow(t):
    'I_VALTAB      : NOW PABRE PCIERRA'
    # INSTRUCCION VALTAB



def p_Limit(t):
    'PLIMIT  :   LIMIT CONDICION    '

def p_LimitOff(t):
    'PLIMIT  :   LIMIT CONDICION OFFSET CONDICION   '

def p_OrderBy(t):
    'PORDERBY  :   ORDER BY LCOMPLEMENTOORDERBY '

def p_ComplementoOrderL(t):
    'LCOMPLEMENTOORDERBY  :   LCOMPLEMENTOORDERBY COMA COMPLEMENTOORDERBY  '

def p_ComplementoOrderL1(t):
    'LCOMPLEMENTOORDERBY  :   COMPLEMENTOORDERBY    '

def p_ComplementoOrderCI(t):
    'COMPLEMENTOORDERBY  :   ID COMPLEMENTOORDERBY1    '

def p_ComplementoOrderCOBC(t):
    'COMPLEMENTOORDERBY1  :   COMPLEMENTOORDER   '

def p_ComplementoOrderCOBP(t):
    'COMPLEMENTOORDERBY1  :   PUNTO ID COMPLEMENTOORDER   '


def p_ComplementoOrder(t):
    'COMPLEMENTOORDER  :   ASC  '

def p_ComplementoOD(t):
    'COMPLEMENTOORDER  :   DESC '

def p_ComplementoOANF(t):
    'COMPLEMENTOORDER  :   ASC NULLS FIRST  '

def p_ComplementoOANL(t):
    'COMPLEMENTOORDER  :   ASC NULLS LAST   '

def p_ComplementoODNF(t):
    'COMPLEMENTOORDER  :   DESC NULLS FIRST '

def p_ComplementoODNL(t):
    'COMPLEMENTOORDER  :   DESC NULLS LAST  '

def p_ComplementoEm(t):
    'COMPLEMENTOORDER  :   EMPTY    '


def p_Having(t):
    'PHAVING  :   HAVING CONDICION '

def p_GroupBy(t):
    'PGROUPBY  :   GROUP BY LCOMPLEMENTOGROUP '

def p_ComplementoGroupL(t):
    'LCOMPLEMENTOGROUP  :   LCOMPLEMENTOGROUP COMA COMPLEMENTOGROUP '

def p_ComplementoGroupLS(t):
    'LCOMPLEMENTOGROUP  :   COMPLEMENTOGROUP '

def p_ComplementoGroupC(t):
    'COMPLEMENTOGROUP  :   ID '

def p_ComplementoGroupC1(t):
    'COMPLEMENTOGROUP  :   ID PUNTO ID '




def p_ValorSub(t):
    'VALOR  :   PABRE SUBCONSULTA PCIERRA ALIAS'

def p_ValorCountAa(t):
    'VALOR  :   COUNT PABRE POR PCIERRA ALIAS'

def p_ValorCounta(t):
    'VALOR  :   COUNT PABRE ID PCIERRA ALIAS'

def p_ValorCountA(t):
    'VALOR  :   COUNT PABRE POR PCIERRA '

def p_ValorCount(t):
    'VALOR  :   COUNT PABRE ID PCIERRA '

def p_ValorCountAliasId(t):
    'VALOR  :   COUNT PABRE ID PUNTO ID PCIERRA ALIAS'

def p_ValorCountIdP(t):
    'VALOR  :   COUNT PABRE ID PUNTO ID PCIERRA'


def p_ValorFuncionesA(t):
    'VALOR  :   FUNCION PABRE ID PUNTO ID PCIERRA ALIAS'

def p_ValorFunciones1A(t):
    'VALOR  :   FUNCION PABRE ID  PCIERRA ALIAS'

def p_ValorCondicion(t):
    'VALOR  :   CONDICION'
    
def p_ValorCondicionAlias(t):
    'VALOR  :   CONDICION ALIAS '

def p_ValorFTrigonometricas(t):
    'VALOR  :   FTRIGONOMETRICAS PABRE LNUM PCIERRA '

def p_ValorFTrigonometricasAlias(t):
    'VALOR  :   FTRIGONOMETRICAS PABRE LNUM PCIERRA ALIAS '

def p_ValorGreatest(t):
    'VALOR  :   GREATEST PABRE LNUM PCIERRA '

def p_ValorLeast(t):
    'VALOR  :   LEAST PABRE LNUM PCIERRA '

def p_ValorGreatestAlias(t):
    'VALOR  :   GREATEST PABRE LNUM PCIERRA ALIAS'

def p_ValorLeastAlias(t):
    'VALOR  :   LEAST PABRE LNUM PCIERRA ALIAS'

def p_ValorRandomA(t):
    'VALOR  :   RANDOM PABRE PCIERRA ALIAS'

def p_ValorRandom(t):
    'VALOR  :   RANDOM PABRE PCIERRA '

def p_ValorPiAlias(t):
    'VALOR  :   PI PABRE PCIERRA   ALIAS '
    
def p_ValorPi(t):
    'VALOR  :   PI PABRE PCIERRA '

def p_ValorFuncionesDecodeA(t):
    'VALOR  :   DECODE PABRE CADENA COMA CADENA PCIERRA ALIAS   '

def p_ValorFuncionesDecode(t):
    'VALOR  :   DECODE PABRE CADENA COMA CADENA PCIERRA   '

def p_ValorFuncionesEncodeA(t):
    'VALOR  :   ENCODE PABRE CADENA COMA CADENA PCIERRA ALIAS   '

def p_ValorFuncionesEncode(t):
    'VALOR  :   ENCODE PABRE CADENA COMA CADENA PCIERRA   '

def p_ValorFuncionesConvertDate(t):
    'VALOR  :   CONVERT PABRE CADENA AS DATE PCIERRA   '

def p_ValorFuncionesConvertInt(t):
    'VALOR  :   CONVERT PABRE CADENA AS INTEGER PCIERRA   '

def p_ValorFuncionesConvertDateA(t):
    'VALOR  :   CONVERT PABRE CADENA AS DATE PCIERRA ALIAS   '

def p_ValorFuncionesConvertIntA(t):
    'VALOR  :   CONVERT PABRE CADENA AS INTEGER PCIERRA ALIAS   '

def p_ValorFuncionesSha(t):
    'VALOR  :   SHA256 PABRE CADENA PCIERRA   '

def p_ValorFuncionesShaA(t):
    'VALOR  :   SHA256 PABRE CADENA PCIERRA ALIAS   '

def p_ValorOperadorMatAlias(t):
    'VALOR  :   NUM OPERADOR NUM ALIAS '

def p_ValorOperadorMat(t):
    'VALOR  :   NUM OPERADOR NUM '

def p_ValorOperadorNotA(t):
    'VALOR  :   BNot NUM ALIAS '

def p_ValorOperadorNot(t):
    'VALOR  :   BNot NUM '

def p_ValorRaizCuadradaA(t):
    'VALOR  :   raizCuadrada NUM ALIAS '

def p_ValorRaizCuadrada(t):
    'VALOR  :   raizCuadrada NUM '

def p_ValorRaizCubicaA(t):
    'VALOR  :   raizCubica NUM ALIAS '

def p_ValorRaizCubica(t):
    'VALOR  :   raizCubica NUM '

def p_ValorFuncionesGetByte(t):
    'VALOR  :   GETBYTE PABRE CADENA COMA NUMERO PCIERRA '

def p_ValorFuncionesGetByteA(t):
    'VALOR  :   GETBYTE PABRE CADENA COMA NUMERO PCIERRA ALIAS '

def p_ValorFuncionesSetByte(t):
    'VALOR  :   SETBYTE PABRE CADENA COMA NUMERO COMA NUMERO PCIERRA '

def p_ValorFuncionesSetByteA(t):
    'VALOR  :   SETBYTE PABRE CADENA COMA NUMERO COMA NUMERO PCIERRA ALIAS '

def p_ValorCase(t):
    'VALOR  :   CASE LWHEN END '

def p_ValorCaseAlias(t):
    'VALOR  :   CASE LWHEN END ALIAS'

def p_ValorFunAlias(t):
    'VALOR  :   ID_VALOR PABRE LCONDICION_FUNCION PCIERRA ALIAS   '

def p_ValorFun(t):
    'VALOR  :   ID_VALOR PABRE LCONDICION_FUNCION PCIERRA   '

def p_LWHEN(t):
    'LWHEN  :   WHEN CONDICION THEN CONDICION LWHEN '

def p_LWHENSimple(t):
    'LWHEN  :   WHEN CONDICION THEN CONDICION '

def p_LWHENElse(t):
    'LWHEN  :   ELSE CONDICION '

def p_IdFuncionDegrees(t):
    'ID_VALOR  :   DEGREES  '

def p_IdFuncionDiv(t):
    'ID_VALOR  :   DIV  '

def p_IdFuncionExp(t):
    'ID_VALOR  :   FEXP  '

def p_IdFuncionFactorial(t):
    'ID_VALOR  :   FACTORIAL  '

def p_IdFuncionFloor(t):
    'ID_VALOR  :   FLOOR  '

def p_IdFuncionGcd(t):
    'ID_VALOR  :   GCD  '

def p_IdFuncionLn(t):
    'ID_VALOR  :   LN  '

def p_IdFuncionLog(t):
    'ID_VALOR  :   LOG  '

def p_IdFuncionMod(t):
    'ID_VALOR  :   MOD  '

def p_IdFuncionPower(t):
    'ID_VALOR  :   POWER  '

def p_IdFuncionRadians(t):
    'ID_VALOR  :   RADIANS  '

def p_IdFuncionRound(t):
    'ID_VALOR  :   ROUND  '

def p_IdFuncionSign(t):
    'ID_VALOR  :   SIGN  '

def p_IdFuncionSqrt(t):
    'ID_VALOR  :   SQRT  '

def p_IdFuncionWidth_bucket(t):
    'ID_VALOR  :   WIDTH_BUCKET  '

def p_IdFuncionTrunc(t):
    'ID_VALOR  :   TRUNC  '

def p_OPERADORAnd(t):
    'OPERADOR  :   BAnd '

def p_OPERADOROr(t):
    'OPERADOR  :   BOr '

def p_OPERADORXor(t):
    'OPERADOR  :   BXor '

def p_OPERADORDIz(t):
    'OPERADOR  :   DesplazaI '

def p_OPERADORDDe(t):
    'OPERADOR  :   DesplazaD '

def p_LNumNumLNum(t):
    'LNUM  : LNUM COMA NUM'

def p_LNumNum(t):
    'LNUM   : NUM'

def p_NumNumero(t):  
    'NUM    : NUMERO '

def p_NumDecimal(t):
    'NUM  :   DECIMAL '

def p_NumCadena(t):
    'NUM  :   CADENA '

def p_FTrigonometricasAcos(t):
    'FTRIGONOMETRICAS  :   ACOS '

def p_FTrigonometricasAcosd(t):
    'FTRIGONOMETRICAS  :   ACOSD '

def p_FTrigonometricasAsin(t):
    'FTRIGONOMETRICAS  :   ASIN '

def p_FTrigonometricasAsind(t):
    'FTRIGONOMETRICAS  :   ASIND '

def p_FTrigonometricasAtan(t):
    'FTRIGONOMETRICAS  :   ATAN '

def p_FTrigonometricasAtand(t):
    'FTRIGONOMETRICAS  :   ATAND '

def p_FTrigonometricasAtan2(t):
    'FTRIGONOMETRICAS  :   ATAN2 '

def p_FTrigonometricasAtan2d(t):
    'FTRIGONOMETRICAS  :   ATAN2D '

def p_FTrigonometricasCos(t):
    'FTRIGONOMETRICAS  :   COS '

def p_FTrigonometricasCosd(t):
    'FTRIGONOMETRICAS  :   COSD '

def p_FTrigonometricasCot(t):
    'FTRIGONOMETRICAS  :   COT '

def p_FTrigonometricasCotd(t):
    'FTRIGONOMETRICAS  :   COTD '

def p_FTrigonometricasSin(t):
    'FTRIGONOMETRICAS  :   SIN '

def p_FTrigonometricasSind(t):
    'FTRIGONOMETRICAS  :   SIND '

def p_FTrigonometricasTan(t):
    'FTRIGONOMETRICAS  :   TAN '

def p_FTrigonometricasTand(t):
    'FTRIGONOMETRICAS  :   TAND '

def p_FTrigonometricasSinh(t):
    'FTRIGONOMETRICAS  :   SINH '

def p_FTrigonometricasCosh(t):
    'FTRIGONOMETRICAS  :   COSH '

def p_FTrigonometricasTanh(t):
    'FTRIGONOMETRICAS  :   TANH '

def p_FTrigonometricasAsinh(t):
    'FTRIGONOMETRICAS  :   ASINH '

def p_FTrigonometricasAcosh(t):
    'FTRIGONOMETRICAS  :   ACOSH '

def p_FTrigonometricasAtanh(t):
    'FTRIGONOMETRICAS  :   ATANH '

def p_funcionAvg(t):
    'FUNCION    :   AVG'

def p_funcionSum(t):
    'FUNCION    :   SUM'

def p_funcionMin(t):
    'FUNCION    :   MIN'

def p_funcionMax(t):
    'FUNCION    :   MAX'

def p_Alias(t):
    'ALIAS  :   AS ID '

def p_AliasS(t):
    'ALIAS  :   ID '

def p_AliasC(t):
    'ALIAS  :   AS IDALIAS'

def p_AliasCS(t):
    'ALIAS  :   IDALIAS'


def p_LValoresFrom(t):
    'LVALORESFROM   :   LVALORESFROM  COMA VALORFROM '

def p_LValoresFrom1(t):
    'LVALORESFROM   :   VALORFROM '

def p_ValoresFromIdAlias(t):
    'VALORFROM  :   ID ALIAS '

def p_ValoresFromId(t):
    'VALORFROM  :   ID '

def p_ValoresFromSub(t):
    'VALORFROM  :   PABRE SUBCONSULTA PCIERRA ALIAS    '

def p_SubconsultaFrom(t):
    'SUBCONSULTA    :   SELECT VALORES PFROM COMPLEMENTO '

def p_SubconsultaFromW(t):
    'SUBCONSULTA    :   SELECT VALORES PFROM PWHERE COMPLEMENTO '

#--------------------CONDICION------------------
def p_Condicion(t):
    '''CONDICION    :   VALOR_COND CONDICION_P
                    |   NOT VALOR_COND CONDICION_P
                    |   PABRE CONDICION PCIERRA
    '''
####AQUI HACE FALTA EDITAR OTRA COSA 

def p_Condicion_p(t):
    '''CONDICION_P  :   SIGN CONDICION
                    | epsilon
    '''

def p_sign(t):
    '''SIGN     :   IGUAL
                |   DIF
                |   DIF1
                |   MENOR
                |   MENORIGUAL
                |   MAYOR
                |   MAYORIGUAL
                |   AND
                |   OR
    '''

def p_CondicionIgual(t):
    'CONDICION  :   CONDICION IGUAL CONDICION '

def p_CondicionDif(t):
    'CONDICION  :   CONDICION DIF CONDICION '

def p_CondicionDif1(t):
    'CONDICION  :   CONDICION DIF1 CONDICION '

def p_CondicionMenor(t):
    'CONDICION  :   CONDICION MENOR CONDICION '

def p_CondicionMenorI(t):
    'CONDICION  :   CONDICION MENORIGUAL CONDICION '

def p_CondicionMayor(t):
    'CONDICION  :   CONDICION MAYOR CONDICION '

def p_CondicionMayorI(t):
    'CONDICION  :   CONDICION MAYORIGUAL CONDICION '

def p_CondicionAnd(t):
    'CONDICION  :   CONDICION AND CONDICION '

def p_CondicionOr(t):
    'CONDICION  :   CONDICION OR CONDICION '

def p_CondicionNot(t):
    'CONDICION  :   NOT CONDICION '

def p_CondicionParentesis(t):
    'CONDICION  :   PABRE CONDICION PCIERRA '

def p_CondicionMas(t):
    'CONDICION  :   CONDICION MAS CONDICION '

def p_CondicionMenos(t):
    'CONDICION  :   CONDICION MENOS CONDICION '

def p_CondicionPor(t):
    'CONDICION  :   CONDICION POR CONDICION '

def p_CondicionDiv(t):
    'CONDICION  :   CONDICION DIVIDIDO CONDICION '

def p_CondicionMod(t):
    'CONDICION  :   CONDICION MODULO CONDICION '

def p_CondicionExp(t):
    'CONDICION  :   CONDICION EXP CONDICION '

def p_CondicionIs(t):
    'CONDICION  :   CONDICION IS CONDICION '

def p_CondicionIsN(t):
    'CONDICION  :   CONDICION ISNULL CONDICION '

def p_CondicionNotN(t):
    'CONDICION  :   CONDICION NOTNULL CONDICION '

def p_CondicionM(t):
    'CONDICION  :   MENOS CONDICION %prec UMENOS'

def p_CondicionP(t):
    'CONDICION  :   MAS CONDICION %prec UMAS'

def p_CondicionExtract(t):
    'CONDICION  :   EXTRACT PABRE DATETIME FROM PTIMESTAMP PCIERRA '

def p_CondicionFuncionWhere(t):
    'CONDICION  :   FUNCIONES_WHERE '

def p_CondicionNum(t):
    'CONDICION  :   NUMERO '

def p_CondicionDec(t):
    'CONDICION  :   DECIMAL'

def p_CondicionCad(t):
    'CONDICION  :   CADENA '

def p_CondicionTrue(t):
    'CONDICION  :   TRUE '

def p_CondicionFalse(t):
    'CONDICION  :   FALSE '

def p_CondicionId(t):
    'CONDICION  :   ID '

def p_CondicionIdP(t):
    'CONDICION  :   ID PUNTO ID '

def p_CondicionIdPor(t):
    'CONDICION  :   ID PUNTO POR '

def p_CondicionFuncionSistema(t):
    'CONDICION  :   FUNCIONES_SISTEMA '

def p_CondicionDatePart(t):
    'CONDICION  :   DATE_PART PABRE CADENA COMA INTERVAL CADENA PCIERRA '

def p_CondicionCurrentDate(t):
    'CONDICION  :   CURRENT_DATE '

def p_CondicionCurrentTime(t):
    'CONDICION  :   CURRENT_TIME '

def p_CondicionTimeStamp(t):
    'CONDICION  :   TIMESTAMP CADENA '

def p_CondicionBetween(t):
    'CONDICION  :   CONDICION BETWEEN CONDICION '

def p_CondicionNotBetween(t):
    'CONDICION  :   CONDICION NOT BETWEEN CONDICION %prec NOTB'

def p_CondicionBetweenSimetric(t):
    'CONDICION  :   CONDICION BETWEEN SIMMETRIC CONDICION '

def p_CondicionBetweenNotSimetric(t):
    'CONDICION  :   CONDICION NOT BETWEEN SIMMETRIC CONDICION  %prec NOTB'

def p_CondicionIsDistinct(t):
    'CONDICION  :   CONDICION IS DISTINCT FROM CONDICION '

def p_CondicionIsNotDistinct(t):
    'CONDICION  :   CONDICION IS NOT DISTINCT FROM CONDICION '

def p_CondicionNull(t):
    'CONDICION  :   NULL '

def p_CondicionUnknown(t):
    'CONDICION  :   UNKNOWN '

def p_CondicionSubConsulta(t):
    'CONDICION  :   PABRE SUBCONSULTA PCIERRA '

def p_CondicionFunciones(t):
    'CONDICION  :   FUNCION PABRE ID PCIERRA'

def p_CondicionFunciones1(t):
    'CONDICION  :   FUNCION PABRE ID PUNTO ID PCIERRA'

def p_CondicionNow(t):
    'CONDICION  :   NOW PABRE PCIERRA '

def p_FuncionesSistemaAlias(t):
    'FUNCIONES_SISTEMA  :   ID_FUNCION PABRE LCONDICION_FUNCION PCIERRA ALIAS   '

def p_FuncionesSistema(t):
    'FUNCIONES_SISTEMA  :   ID_FUNCION PABRE LCONDICION_FUNCION PCIERRA   '

def p_FuncionesSistemaString(t):
    'FUNCIONES_SISTEMA  :   ID_FUNCION_S PABRE LCONDICION_FUNCION_S PCIERRA ALIAS   '

def p_FuncionesSistemaString1(t):
    'FUNCIONES_SISTEMA  :   ID_FUNCION_S PABRE LCONDICION_FUNCION_S PCIERRA   '

def p_FuncionesSistemaTrimA(t):
    'FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH CADENA FROM CADENA PCIERRA ALIAS   '

def p_FuncionesSistemaTrim(t):
    'FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH CADENA FROM CADENA PCIERRA   '

def p_FuncionesSistemaTrimA1(t):
    'FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH FROM CADENA COMA CADENA PCIERRA ALIAS   '

def p_FuncionesSistemaTrim1(t):
    'FUNCIONES_SISTEMA  :   TRIM PABRE LBOTH FROM CADENA COMA CADENA PCIERRA   '

def p_Id_FuncionSubstring(t):
    'ID_FUNCION_S  :   SUBSTRING   '

def p_Id_FuncionLength(t):
    'ID_FUNCION_S  :   LENGTH   '

def p_Id_FuncionSubstr(t):
    'ID_FUNCION_S  :   SUBSTR   '

def p_LBOTHLeading(t):
    'LBOTH  :   LEADING   '

def p_LBOTHTrailing(t):
    'LBOTH  :   TRAILING   '

def p_LBOTHBoth(t):
    'LBOTH  :   BOTH   '

def p_LCondicionFuncion_Condicion(t):
    'LCONDICION_FUNCION_S  :   CONDICION   '

def p_LCondicionFuncion_S(t):
    'LCONDICION_FUNCION_S  :   CONDICION COMA NUMERO COMA NUMERO   '

def p_IdFuncionAbs(t):
    'ID_FUNCION  :   ABS  '

def p_IdFuncionCBRT(t):
    'ID_FUNCION  :   CBRT  '

def p_IdFuncionCeil(t):
    'ID_FUNCION  :   CEIL  '

def p_IdFuncionCeiling(t):
    'ID_FUNCION  :   CEILING  '

def p_LCondicionFuncion1(t):
    'LCONDICION_FUNCION  :   CONDICION  '

def p_LCondicionFuncion(t):
    'LCONDICION_FUNCION  :   LCONDICION_FUNCION COMA CONDICION  '

def p_DateTimeYear(t):
    'DATETIME  :   YEAR '

def p_DateTimeHour(t):
    'DATETIME  :   HOUR '

def p_DateTimeMinute(t):
    'DATETIME  :   MINUTE '

def p_DateTimeSecond(t):
    'DATETIME  :   SECOND '

def p_DateTimeMonth(t):
    'DATETIME  :   MONTH '
    
def p_DateTimeDay(t):
    'DATETIME  :   DAY '

def p_FuncionesWhereExist(t):
    'FUNCIONES_WHERE  :   EXISTS PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereIn(t):
    'FUNCIONES_WHERE  :   CONDICION IN PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereNotIn(t):
    'FUNCIONES_WHERE  :   CONDICION NOT IN PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereAny(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW ANY PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereAll(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW ALL PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereSome(t):
    'FUNCIONES_WHERE  :   CONDICION OPERATOR_FW SOME PABRE SUBCONSULTA PCIERRA   '

def p_FuncionesWhereLike(t):
    'FUNCIONES_WHERE  :   CONDICION LIKE CADENA   '

def p_FuncionesWhereNotLike(t):
    'FUNCIONES_WHERE  :   CONDICION NOT LIKE CADENA   '

def p_OperatorFwMenor(t):
    'OPERATOR_FW  :   MENOR   '

def p_OperatorFwMayor(t):
    'OPERATOR_FW  :   MAYOR   '

def p_OperatorFwMenorIgual(t):
    'OPERATOR_FW  :   MENORIGUAL   '

def p_OperatorFwMayorIgual(t):
    'OPERATOR_FW  :   MAYORIGUAL   '

def p_OperatorFwIgual(t):
    'OPERATOR_FW  :   IGUAL   '

def p_OperatorFwDif(t):
    'OPERATOR_FW  :   DIF   '

def p_OperatorFwDif1(t):
    'OPERATOR_FW  :   DIF1   '

def p_PTimestamC(t):
    'PTIMESTAMP  :   TIMESTAMP CADENA '

def p_PTimestamId(t):
    'PTIMESTAMP  :   TIMESTAMP ID '

def p_PTimestamIdPId(t):
    'PTIMESTAMP  :   TIMESTAMP ID PUNTO ID '

def p_PTimestamCadena(t):
    'PTIMESTAMP  :   CADENA '

def p_PTimestamId1(t):
    'PTIMESTAMP  :   ID '

def p_PTimestamIdP(t):
    'PTIMESTAMP  :   ID PUNTO ID '

def p_empty(t):
    'EMPTY :'

def p_error(t):
    global counter_syntactic_error
    err = open("reports/error_syntactic.txt", "a+")
    txt = '<tr><td>' + str(counter_syntactic_error) + '</td>'
    txt += '<td>' + str(t.value) + '</td>'
    txt += '<td>' + 'Texto ingresado no reconocido.' + '</td>'
    txt += '<td>' + str(t.lexer.lineno) + '</td>'
    txt += '<td>' + str(get_column(t.lexer.lexdata, t)) + '</td><tr>\n'
    err.write(txt)
    err.close()
    counter_syntactic_error += 1
    if not t:
        return
    while True:
        entry = parser.token()
        if not entry or entry.type == 'RBRACE':
            break
    parser.restart()


# START PARSING THE INPUT TEXT
parser = yacc.yacc()


def parse(p_input):
    global counter_lexical_error, counter_syntactic_error
    counter_lexical_error = 1
    counter_syntactic_error = 1
    return parser.parse(p_input)

